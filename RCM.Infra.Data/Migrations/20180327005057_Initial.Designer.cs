// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RCM.Infra.Data.Context;
using System;

namespace RCM.Infra.Data.Migrations
{
    [DbContext(typeof(RCMDbContext))]
    [Migration("20180327005057_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RCM.Domain.Models.BancoModels.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodigoCompensacao")
                        .HasMaxLength(4);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("RCM.Domain.Models.ChequeModels.Cheque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("BancoId");

                    b.Property<int>("ClienteId");

                    b.Property<string>("Conta")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime?>("DataPagamento");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<string>("NumeroCheque")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Observacao")
                        .HasMaxLength(1000);

                    b.Property<decimal>("Valor")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("RCM.Domain.Models.CidadeModels.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EstadoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("RCM.Domain.Models.ClienteModels.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("RCM.Domain.Models.Contato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Observacao")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Contatos");
                });

            modelBuilder.Entity("RCM.Domain.Models.DuplicataModels.Duplicata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime?>("DataPagamento");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<int>("FornecedorId");

                    b.Property<int>("NotaFiscalId");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Observacao")
                        .HasMaxLength(1000);

                    b.Property<bool>("Pago");

                    b.Property<decimal>("Valor")
                        .HasMaxLength(4);

                    b.Property<decimal?>("ValorPago");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("NotaFiscalId");

                    b.ToTable("Duplicatas");
                });

            modelBuilder.Entity("RCM.Domain.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("CidadeId");

                    b.Property<int>("ClienteId");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100);

                    b.Property<int>("Numero")
                        .HasMaxLength(4);

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("RCM.Domain.Models.EstadoModels.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("RCM.Domain.Models.FornecedorModels.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Observacao")
                        .HasMaxLength(1000);

                    b.Property<int?>("ProdutoId");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("RCM.Domain.Models.NotaFiscalModels.NotaFiscal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataChegada");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<int?>("FornecedorId");

                    b.Property<int?>("NotaFiscalId");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<decimal>("Valor")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("NotaFiscalId");

                    b.ToTable("NotasFiscais");
                });

            modelBuilder.Entity("RCM.Domain.Models.OrdemServicoModels.OrdemServico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("OrdensServico");
                });

            modelBuilder.Entity("RCM.Domain.Models.ProdutoModels.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aplicacao");

                    b.Property<string>("Nome");

                    b.Property<int?>("OrdemServicoId");

                    b.Property<decimal>("PrecoVenda");

                    b.Property<int>("Quantidade");

                    b.Property<int?>("VendaId");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId");

                    b.HasIndex("VendaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("RCM.Domain.Models.VendaModels.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<DateTime>("DataVenda");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("RCM.Domain.Models.ChequeModels.Cheque", b =>
                {
                    b.HasOne("RCM.Domain.Models.BancoModels.Banco", "Banco")
                        .WithMany("Cheques")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCM.Domain.Models.ClienteModels.Cliente", "Cliente")
                        .WithMany("Cheques")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCM.Domain.Models.CidadeModels.Cidade", b =>
                {
                    b.HasOne("RCM.Domain.Models.EstadoModels.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCM.Domain.Models.Contato", b =>
                {
                    b.HasOne("RCM.Domain.Models.ClienteModels.Cliente", "Cliente")
                        .WithMany("Contatos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCM.Domain.Models.DuplicataModels.Duplicata", b =>
                {
                    b.HasOne("RCM.Domain.Models.FornecedorModels.Fornecedor", "Fornecedor")
                        .WithMany("Duplicatas")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCM.Domain.Models.NotaFiscalModels.NotaFiscal", "NotaFiscal")
                        .WithMany("Duplicatas")
                        .HasForeignKey("NotaFiscalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCM.Domain.Models.Endereco", b =>
                {
                    b.HasOne("RCM.Domain.Models.CidadeModels.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCM.Domain.Models.ClienteModels.Cliente", "Cliente")
                        .WithMany("Enderecos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCM.Domain.Models.FornecedorModels.Fornecedor", b =>
                {
                    b.HasOne("RCM.Domain.Models.ProdutoModels.Produto")
                        .WithMany("Fornecedores")
                        .HasForeignKey("ProdutoId");
                });

            modelBuilder.Entity("RCM.Domain.Models.NotaFiscalModels.NotaFiscal", b =>
                {
                    b.HasOne("RCM.Domain.Models.FornecedorModels.Fornecedor")
                        .WithMany("NotasFiscais")
                        .HasForeignKey("FornecedorId");

                    b.HasOne("RCM.Domain.Models.NotaFiscalModels.NotaFiscal")
                        .WithMany("NotasFiscais")
                        .HasForeignKey("NotaFiscalId");
                });

            modelBuilder.Entity("RCM.Domain.Models.OrdemServicoModels.OrdemServico", b =>
                {
                    b.HasOne("RCM.Domain.Models.ClienteModels.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCM.Domain.Models.ProdutoModels.Produto", b =>
                {
                    b.HasOne("RCM.Domain.Models.OrdemServicoModels.OrdemServico")
                        .WithMany("Produtos")
                        .HasForeignKey("OrdemServicoId");

                    b.HasOne("RCM.Domain.Models.VendaModels.Venda")
                        .WithMany("Produtos")
                        .HasForeignKey("VendaId");
                });

            modelBuilder.Entity("RCM.Domain.Models.VendaModels.Venda", b =>
                {
                    b.HasOne("RCM.Domain.Models.ClienteModels.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
